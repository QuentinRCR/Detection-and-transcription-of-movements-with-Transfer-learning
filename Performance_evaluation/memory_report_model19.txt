Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
     3     44.0 MiB     44.0 MiB           1   @profile
     4                                         def main():
     5     55.8 MiB     11.8 MiB           1       from numpy import argmax,matmul,array,sin,cos,pi
     6     79.4 MiB     23.5 MiB           1       from pandas import read_csv
     7     81.0 MiB      1.6 MiB           1       from ahrs.filters import Madgwick
     8     81.0 MiB      0.0 MiB           1       from ahrs.common.orientation import q2rpy
     9     81.0 MiB      0.0 MiB           1       from sys import path
    10    259.2 MiB    178.2 MiB           1       from keras.models import load_model
    11
    12
    13                                             # go to the correct directory to import utils
    14    259.2 MiB      0.0 MiB           1       folder_path = "C:/Users/quent/Documents/Ecole/2023-3A/Projet_recherche-Smart_glove/"
    15    259.2 MiB      0.0 MiB           1       path.insert(1,f'{folder_path}Previous_work/Personal_Experiments/Extract_values')
    16    275.8 MiB     16.6 MiB           1       from utils import convert_points_to_images, remove_close_points, smoothen_points,inter,scale_and_center
    17
    18    339.4 MiB      0.0 MiB          33       def rotation_matrix(theta):
    19    339.4 MiB      0.0 MiB          32           return array([[cos(theta),-sin(theta)],[sin(theta),cos(theta)]])
    20
    21                                             # Load the specified try
    22    275.8 MiB      0.0 MiB           2       def load_try(try_name):
    23    275.8 MiB      0.0 MiB           1           weight_folder_path = f'{folder_path}Previous_work/Personal_Experiments/ModelWeights'     
    24
    25                                                 # get the name of the model used for the try
    26    275.8 MiB      0.0 MiB           2           with open(f'{weight_folder_path}/{try_name}/model_type.txt', newline='') as csvfile:     
    27    275.8 MiB      0.0 MiB           1               model_name = csvfile.readline()
    28
    29                                                 # load the model
    30    338.5 MiB     62.7 MiB           1           model = load_model(f'{weight_folder_path}/initialization/{model_name}.h5')
    31
    32                                                 # load weights from the try
    33    338.6 MiB      0.1 MiB           1           model.load_weights(f'{weight_folder_path}/{try_name}/data.h5')
    34
    35    338.6 MiB      0.0 MiB           1           print(f'Loading model {model_name} for try {try_name}')
    36
    37    338.6 MiB      0.0 MiB           1           return model
    38
    39
    40    275.8 MiB      0.0 MiB           1       model_to_load = "61-LSTM-FT-1"#"57-CNN-FT-0"
    41    275.8 MiB      0.0 MiB           1       model_LSTM = True
    42
    43    338.6 MiB      0.0 MiB           1       model = load_try(model_to_load)
    44    339.0 MiB      0.4 MiB           1       df = read_csv(f'{folder_path}Previous_work/Personal_Experiments/Performance_evaluation/example_data.csv')
    45
    46    339.3 MiB      0.3 MiB           1       acc_data = df[['acc_x', 'acc_y', 'acc_z']].values
    47    339.3 MiB      0.0 MiB           1       mag_data = df[['mag_x', 'mag_y', 'mag_z']].values
    48    339.3 MiB      0.0 MiB           1       gyro_data = df[['gyr_x', 'gyr_y', 'gyr_z']].values
    49
    50    339.4 MiB      0.1 MiB           1       madgwick = Madgwick(acc=acc_data, gyr=gyro_data, mag=mag_data, frequency=27.0)
    51    339.4 MiB      0.0 MiB          35       angles = [q2rpy(i, in_deg = False) for i in madgwick.Q] # x,y,z = roll, pitch, yaw
    52    339.4 MiB      0.0 MiB           1       angles = array(angles)
    53
    54                                             # x= pitch; y= yaw
    55    339.4 MiB      0.0 MiB           1       xy = angles[:,[2,1]]
    56
    57                                             # put letters upside down
    58    339.4 MiB      0.0 MiB          35       xy_shift = array([matmul(rotation_matrix(pi),xyi) for xyi in xy])
    59
    60                                             # scale the values between 0 and 1 while keeping the aspect ratio + center the number        
    61    339.4 MiB      0.0 MiB           1       xy_scaled = scale_and_center(xy_shift)
    62
    63                                             # do the average and remove redundant points
    64    339.4 MiB      0.0 MiB           1       xy_smoothed = smoothen_points(xy_scaled,3)
    65    339.4 MiB      0.0 MiB           1       xy_clean,mask = remove_close_points(xy_smoothed)
    66
    67    339.5 MiB      0.1 MiB           1       interpolation = inter(xy_clean,100,3)
    68
    69
    70    339.5 MiB      0.0 MiB           1       if model_LSTM:
    71                                                 # shape correctly for the LSTM
    72    339.5 MiB      0.0 MiB           1           interpolation = interpolation.transpose(1,0).reshape(1,100,2)
    73    364.0 MiB     24.5 MiB           1           predicated_value = chr(argmax(model.predict(interpolation))+97)
    74                                             else:
    75                                                 image = convert_points_to_images(interpolation.T,gaussian_kernel=21,final_dimension=28,initial_dimension=128,line_thickness=1.5,border_thickness=3)
    76                                                 image = image.reshape(1,28,28)
    77                                                 predicated_value = chr(argmax(model.predict(image))+97)
    78
    79
    80    364.0 MiB      0.0 MiB           1       print(predicated_value)